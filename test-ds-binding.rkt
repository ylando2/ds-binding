#lang racket

(require rackunit)
(require profile)
(require "ds-binding.rkt")
  
;;Testing the first version of my macros
;;Testing ds-let
(displayln "First version of ds-let test")
(define list1 '(1 2 3))
(ds-let () list1 (displayln "ds-let test 1 don't do any binding"))
(ds-let ((o a 10)) list1 (check-equal? a 1 "ds-let: test 2"))
(ds-let ((o a 10)) '() (check-equal? a 10 "ds-let: test 3"))
(ds-let (a) list1 (check-equal? a 1 "ds-let: test 4"))
(ds-let ((a b c)) (list list1) (check-equal? (list a b c) '(1 2 3) "ds-let: test 5"))
(ds-let (a (o b 20) (o c 30)) list1 (check-equal? (list a b c) '(1 2 3) "ds-let: test 6"))
(ds-let (a (o b 20) (o c 30)) '(10) (check-equal? (list a b c) '(10 20 30) "ds-let: test 7"))
(ds-let ((o a 10) . lst) list1 (check-equal? (list a lst) (list 1 '(2 3)) "ds-let: test 8"))
(ds-let ((o a 10) . lst) '() (check-equal? (list a lst) (list 10 '()) "ds-let: test 9"))
(ds-let (a . lst) list1 (check-equal? (list a lst) (list 1 '(2 3)) "ds-let: test 10"))
(ds-let ((a) . lst) '((1) 2 3) (check-equal? (list a lst) (list 1 '(2 3)) "ds-let: test 11"))
(ds-let (a b c) list1 (check-equal? (list a b c) '(1 2 3) "ds-let: test 12"))
(ds-let ((a b) c d) '((1 2) 3 4) (check-equal? (list a b c d) '(1 2 3 4) "ds-let: test 13"))

;;Testing ds-set!
(displayln "First version of ds-set! test")
(define a #f)
(define b #f)
(define c #f)
(define d #f)
(define lst #f)
(ds-set! () list1) 
(displayln "ds-set! test 1 don't do any binding")
(ds-set! ((o a 10)) list1) 
(check-equal? a 1 "ds-set!: test 2")
(ds-set! ((o a 10)) '()) 
(check-equal? a 10 "ds-set!: test 3")
(ds-set! (a) list1) 
(check-equal? a 1 "ds-set!: test 4")
(ds-set! ((a b c)) (list list1)) 
(check-equal? (list a b c) '(1 2 3) "ds-set!: test 5")
(ds-set! (a (o b 20) (o c 30)) list1) 
(check-equal? (list a b c) '(1 2 3) "ds-set!: test 6")
(ds-set! (a (o b 20) (o c 30)) '(10)) 
(check-equal? (list a b c) '(10 20 30) "ds-set!: test 7")
(ds-set! ((o a 10) . lst) list1) 
(check-equal? (list a lst) (list 1 '(2 3)) "ds-set!: test 8")
(ds-set! ((o a 10) . lst) '()) 
(check-equal? (list a lst) (list 10 '()) "ds-set!: test 9")
(ds-set! (a . lst) list1) 
(check-equal? (list a lst) (list 1 '(2 3)) "ds-set!: test 10")
(ds-set! ((a) . lst) '((1) 2 3)) 
(check-equal? (list a lst) (list 1 '(2 3)) "ds-set!: test 11")
(ds-set! (a b c) list1) 
(check-equal? (list a b c) '(1 2 3) "ds-set!: test 12")
(ds-set! ((a b) c d) '((1 2) 3 4)) 
(check-equal? (list a b c d) '(1 2 3 4) "ds-set!: test 13")

;;Testing ds-define
(displayln "First version of ds-define test")
(ds-define () list1) 
(displayln "ds-define test 1 don't do any binding")
(ds-define ((o aa1 10)) list1) 
(check-equal? aa1 1 "ds-define: test 2")
(ds-define ((o aa2 10)) '()) 
(check-equal? aa2 10 "ds-define: test 3")
(ds-define (aa3) list1) 
(check-equal? aa3 1 "ds-define: test 4")
(ds-define ((aa4 bb1 cc1)) (list list1)) 
(check-equal? (list aa4 bb1 cc1) '(1 2 3) "ds-define: test 5")
(ds-define (aa5 (o bb2 20) (o cc2 30)) list1) 
(check-equal? (list aa5 bb2 cc2) '(1 2 3) "ds-define: test 6")
(ds-define (aa6 (o bb3 20) (o cc3 30)) '(10)) 
(check-equal? (list aa6 bb3 cc3) '(10 20 30) "ds-define: test 7")
(ds-define ((o aa7 10) . lst1) list1) 
(check-equal? (list aa7 lst1) (list 1 '(2 3)) "ds-define: test 8")
(ds-define ((o aa8 10) . lst2) '()) 
(check-equal? (list aa8 lst2) (list 10 '()) "ds-define: test 9")
(ds-define (aa9 . lst3) list1) 
(check-equal? (list aa9 lst3) (list 1 '(2 3)) "ds-define: test 10")
(ds-define ((aa10) . lst4) '((1) 2 3)) 
(check-equal? (list aa10 lst4) (list 1 '(2 3)) "ds-define: test 11")
(ds-define (aa11 bb4 cc4) list1) 
(check-equal? (list aa11 bb4 cc4) '(1 2 3) "ds-define: test 12")
(ds-define ((aa12 bb5) cc5 dd1) '((1 2) 3 4)) 
(check-equal? (list aa12 bb5 cc5 dd1) '(1 2 3 4) "ds-define: test 13")


;;Testing the second version of my macros
;;Testing ds-let2
(displayln "Second version of ds-let test")
(ds-let2 () list1 (displayln "ds-let2 test 1 don't do any binding"))
(ds-let2 ((o a 10)) list1 (check-equal? a 1 "ds-let2: test 2"))
(ds-let2 ((o a 10)) '() (check-equal? a 10 "ds-let2: test 3"))
(ds-let2 (a) list1 (check-equal? a 1 "ds-let2: test 4"))
(ds-let2 ((a b c)) (list list1) (check-equal? (list a b c) '(1 2 3) "ds-let2: test 5"))
(ds-let2 (a (o b 20) (o c 30)) list1 (check-equal? (list a b c) '(1 2 3) "ds-let2: test 6"))
(ds-let2 (a (o b 20) (o c 30)) '(10) (check-equal? (list a b c) '(10 20 30) "ds-let2: test 7"))
(ds-let2 ((o a 10) . lst) list1 (check-equal? (list a lst) (list 1 '(2 3)) "ds-let2: test 8"))
(ds-let2 ((o a 10) . lst) '() (check-equal? (list a lst) (list 10 '()) "ds-let2: test 9"))
(ds-let2 (a . lst) list1 (check-equal? (list a lst) (list 1 '(2 3)) "ds-let2: test 10"))
(ds-let2 ((a) . lst) '((1) 2 3) (check-equal? (list a lst) (list 1 '(2 3)) "ds-let2: test 11"))
(ds-let2 (a b c) list1 (check-equal? (list a b c) '(1 2 3) "ds-let2: test 12"))
(ds-let2 ((a b) c d) '((1 2) 3 4) (check-equal? (list a b c d) '(1 2 3 4) "ds-let2: test 13"))

;;Testing ds-set!
(displayln "Second version of ds-set! test")
(ds-set2! () list1) 
(displayln "ds-set2! test 1 don't do any binding")
(ds-set2! ((o a 10)) list1) 
(check-equal? a 1 "ds-set2!: test 2")
(ds-set2! ((o a 10)) '()) 
(check-equal? a 10 "ds-set2!: test 3")
(ds-set2! (a) list1) 
(check-equal? a 1 "ds-set2!: test 4")
(ds-set2! ((a b c)) (list list1)) 
(check-equal? (list a b c) '(1 2 3) "ds-set2!: test 5")
(ds-set2! (a (o b 20) (o c 30)) list1) 
(check-equal? (list a b c) '(1 2 3) "ds-set2!: test 6")
(ds-set2! (a (o b 20) (o c 30)) '(10)) 
(check-equal? (list a b c) '(10 20 30) "ds-set2!: test 7")
(ds-set2! ((o a 10) . lst) list1) 
(check-equal? (list a lst) (list 1 '(2 3)) "ds-set2!: test 8")
(ds-set2! ((o a 10) . lst) '()) 
(check-equal? (list a lst) (list 10 '()) "ds-set2!: test 9")
(ds-set2! (a . lst) list1) 
(check-equal? (list a lst) (list 1 '(2 3)) "ds-set2!: test 10")
(ds-set2! ((a) . lst) '((1) 2 3)) 
(check-equal? (list a lst) (list 1 '(2 3)) "ds-set2!: test 11")
(ds-set2! (a b c) list1) 
(check-equal? (list a b c) '(1 2 3) "ds-set2!: test 12")
(ds-set2! ((a b) c d) '((1 2) 3 4)) 
(check-equal? (list a b c d) '(1 2 3 4) "ds-set2!: test 13")

;;Testing ds-define
(displayln "Second version of ds-define test")
(ds-define2 () list1) 
(displayln "ds-define2 test 1 don't do any binding")
(ds-define2 ((o aa*1 10)) list1) 
(check-equal? aa*1 1 "ds-define2: test 2")
(ds-define2 ((o aa*2 10)) '()) 
(check-equal? aa*2 10 "ds-define2: test 3")
(ds-define2 (aa*3) list1) 
(check-equal? aa*3 1 "ds-define2: test 4")
(ds-define2 ((aa*4 bb*1 cc*1)) (list list1)) 
(check-equal? (list aa*4 bb*1 cc*1) '(1 2 3) "ds-define2: test 5")
(ds-define2 (aa*5 (o bb*2 20) (o cc*2 30)) list1) 
(check-equal? (list aa*5 bb*2 cc*2) '(1 2 3) "ds-define2: test 6")
(ds-define2 (aa*6 (o bb*3 20) (o cc*3 30)) '(10)) 
(check-equal? (list aa*6 bb*3 cc*3) '(10 20 30) "ds-define2: test 7")
(ds-define2 ((o aa*7 10) . lst*1) list1) 
(check-equal? (list aa*7 lst*1) (list 1 '(2 3)) "ds-define2: test 8")
(ds-define2 ((o aa*8 10) . lst*2) '()) 
(check-equal? (list aa*8 lst*2) (list 10 '()) "ds-define2: test 9")
(ds-define2 (aa*9 . lst*3) list1) 
(check-equal? (list aa*9 lst*3) (list 1 '(2 3)) "ds-define2: test 10")
(ds-define2 ((aa*10) . lst*4) '((1) 2 3)) 
(check-equal? (list aa*10 lst*4) (list 1 '(2 3)) "ds-define2: test 11")
(ds-define2 (aa*11 bb*4 cc*4) list1) 
(check-equal? (list aa*11 bb*4 cc*4) '(1 2 3) "ds-define2: test 12")
(ds-define2 ((aa*12 bb*5) cc*5 dd*1) '((1 2) 3 4)) 
(check-equal? (list aa*12 bb*5 cc*5 dd*1) '(1 2 3 4) "ds-define2: test 13")

(displayln "Profile first version of ds-let") 
(profile-thunk
 (lambda ()
   (let ((lst '((1) ((2)) (3 4) (5 6 7))))
     (let loop ((i 1000000) (sum 0))
       (ds-let ((a) ((b)) (c (o d 10)) (e f g (o h 11))) lst
        (if (> i 0) (loop (- i 1) (+ sum a b c d e f g h))
            (displayln sum)))))))

(displayln "Profile first version of ds-define")
(profile-thunk
 (lambda ()
   (let ((lst '((1) ((2)) (3 4) (5 6 7))))
     (let loop ((i 1000000) (sum 0))
       (ds-define ((a) ((b)) (c (o d 10)) (e f g (o h 11))) lst)
       (if (> i 0) (loop (- i 1) (+ sum a b c d e f g h))
           (displayln sum))))))

(displayln "Profile second version of ds-let") 
(profile-thunk
 (lambda ()
   (let ((lst '((1) ((2)) (3 4) (5 6 7))))
     (let loop ((i 1000000) (sum 0))
       (ds-let2 ((a) ((b)) (c (o d 10)) (e f g (o h 11))) lst
        (if (> i 0) (loop (- i 1) (+ sum a b c d e f g h))
            (displayln sum)))))))

(displayln "Profile second version of ds-define")
(profile-thunk
 (lambda ()
   (let ((lst '((1) ((2)) (3 4) (5 6 7))))
     (let loop ((i 1000000) (sum 0))
       (ds-define2 ((a) ((b)) (c (o d 10)) (e f g (o h 11))) lst)
       (if (> i 0) (loop (- i 1) (+ sum a b c d e f g h))
           (displayln sum))))))